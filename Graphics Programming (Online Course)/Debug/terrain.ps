//There are three textures we will be using for the three different degrees of slope that we want to handle.

Texture2D grassTexture : register(t0);
Texture2D slopeTexture : register(t1);
Texture2D rockTexture  : register(t2);

SamplerState SampleType;

cbuffer LightBuffer
{
    float4 ambientColor;
    float4 diffuseColor;
    float3 lightDirection;
    float padding;
};

struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
    float3 normal : NORMAL;
};

float4 main(PixelInputType input) : SV_TARGET
{
    float4 grassColor;
    float4 slopeColor;
    float4 rockColor;
    float slope;
    float blendAmount;
    float4 textureColor;
    float3 lightDir;
    float lightIntensity;
    float4 color;

	
    // Sample the grass color from the texture using the sampler at this texture coordinate location.
    grassColor = grassTexture.Sample(SampleType, input.tex);

    // Sample the slope color from the texture using the sampler at this texture coordinate location.
    slopeColor = slopeTexture.Sample(SampleType, input.tex);

    // Sample the rock color from the texture using the sampler at this texture coordinate location.
    rockColor = rockTexture.Sample(SampleType, input.tex);

    // Calculate the slope of this point.
    slope = 1.0f - input.normal.y;

	/*
    // Determine which texture to use based on height.
    if(slope < 0.3)
    {
        blendAmount = slope / 0.2f;
        textureColor = lerp(grassColor, slopeColor, blendAmount);
    }
	
    if((slope < 0.7) && (slope >= 0.3f))
    {
        blendAmount = (slope - 0.2f) * (1.0f / (0.7f - 0.2f));
        textureColor = lerp(slopeColor, rockColor, blendAmount);
    }

    if(slope >= 0.7) 
    {
        textureColor = rockColor;
    }
	*/
	
	float4 inputNormal = float4(input.normal.x, input.normal.y, input.normal.z, 1);
	float4 blending = abs(inputNormal);
	blending = normalize(max(blending, 0.00001));
	float b = (blending.x + blending.y + blending.z);
	blending /= float4(b, b, b, 1);

	float3 x = grassTexture.Sample(SampleType, input.position.yz);
    float3 y = slopeTexture.Sample(SampleType, input.position.xz);
    float3 z = rockTexture.Sample(SampleType, input.position.xy);

	float3 tColor = x * blending.x + y * blending.y + z * blending.z;
	textureColor = float4(tColor.x, tColor.y, tColor.z, 1);

	// Invert the light direction for calculations.
    lightDir = -lightDirection;

    // Calculate the amount of light on this pixel.
    lightIntensity = saturate(dot(input.normal, lightDir));
	
    // Determine the final diffuse color based on the diffuse color and the amount of light intensity.
    color = diffuseColor * lightIntensity;

    // Saturate the final light color.
    color = saturate(color);

    // Multiply the texture color and the final light color to get the result.
    color = color * textureColor;

    return color;
}